//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RestaurantEntities : DbContext
    {
        public RestaurantEntities()
            : base("name=RestaurantEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<acc_CashFlow_Type> acc_CashFlow_Type { get; set; }
        public virtual DbSet<acc_CashFlowGroup> acc_CashFlowGroup { get; set; }
        public virtual DbSet<acc_CashFlowMapping> acc_CashFlowMapping { get; set; }
        public virtual DbSet<acc_Chart_of_Account_Maping> acc_Chart_of_Account_Maping { get; set; }
        public virtual DbSet<acc_Group> acc_Group { get; set; }
        public virtual DbSet<acc_Group_Maping> acc_Group_Maping { get; set; }
        public virtual DbSet<acc_Ledger> acc_Ledger { get; set; }
        public virtual DbSet<acc_Nature> acc_Nature { get; set; }
        public virtual DbSet<acc_Subsidiary> acc_Subsidiary { get; set; }
        public virtual DbSet<acc_SubsidiaryVoucherDetail> acc_SubsidiaryVoucherDetail { get; set; }
        public virtual DbSet<acc_tbl_Group_MIS> acc_tbl_Group_MIS { get; set; }
        public virtual DbSet<acc_tbl_MIS> acc_tbl_MIS { get; set; }
        public virtual DbSet<acc_VoucherDetail> acc_VoucherDetail { get; set; }
        public virtual DbSet<acc_VoucherEntry> acc_VoucherEntry { get; set; }
        public virtual DbSet<acc_VoucherType> acc_VoucherType { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<tblAction> tblActions { get; set; }
        public virtual DbSet<tblChalanReport> tblChalanReports { get; set; }
        public virtual DbSet<tblDesignation> tblDesignations { get; set; }
        public virtual DbSet<tblEmployeeInformation> tblEmployeeInformations { get; set; }
        public virtual DbSet<tblGroupAndShiftMapping> tblGroupAndShiftMappings { get; set; }
        public virtual DbSet<tblGroupForShift> tblGroupForShifts { get; set; }
        public virtual DbSet<tblMeasurementUnit> tblMeasurementUnits { get; set; }
        public virtual DbSet<tblModule> tblModules { get; set; }
        public virtual DbSet<tblOtherExpense> tblOtherExpenses { get; set; }
        public virtual DbSet<tblPHtoSPProductTransfer> tblPHtoSPProductTransfers { get; set; }
        public virtual DbSet<tblProductEntryToProductionHouse> tblProductEntryToProductionHouses { get; set; }
        public virtual DbSet<tblProductFromSupplier> tblProductFromSuppliers { get; set; }
        public virtual DbSet<tblProductInformation> tblProductInformations { get; set; }
        public virtual DbSet<tblProductionHouseInformation> tblProductionHouseInformations { get; set; }
        public virtual DbSet<tblProductionHouseToProductMapping> tblProductionHouseToProductMappings { get; set; }
        public virtual DbSet<tblProductSold> tblProductSolds { get; set; }
        public virtual DbSet<tblProductTransfer> tblProductTransfers { get; set; }
        public virtual DbSet<tblProductType> tblProductTypes { get; set; }
        public virtual DbSet<tblRestaurantInformation> tblRestaurantInformations { get; set; }
        public virtual DbSet<tblRestaurantModule> tblRestaurantModules { get; set; }
        public virtual DbSet<tblRestaurantUser> tblRestaurantUsers { get; set; }
        public virtual DbSet<tblRestaurantUserModule> tblRestaurantUserModules { get; set; }
        public virtual DbSet<tblRestaurantUserView> tblRestaurantUserViews { get; set; }
        public virtual DbSet<tblSellsPoint> tblSellsPoints { get; set; }
        public virtual DbSet<tblShift> tblShifts { get; set; }
        public virtual DbSet<tblStoreInformation> tblStoreInformations { get; set; }
        public virtual DbSet<tblSupplierInformation> tblSupplierInformations { get; set; }
        public virtual DbSet<tblSuppliersProduct> tblSuppliersProducts { get; set; }
        public virtual DbSet<tblTotalAmount> tblTotalAmounts { get; set; }
        public virtual DbSet<tblUserActionMapping> tblUserActionMappings { get; set; }
        public virtual DbSet<tblView> tblViews { get; set; }
        public virtual DbSet<tblPurchaseProductUnitPrice> tblPurchaseProductUnitPrices { get; set; }
    
        public virtual int BackUpDatabase(string path)
        {
            var pathParameter = path != null ?
                new ObjectParameter("path", path) :
                new ObjectParameter("path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BackUpDatabase", pathParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetProductAvailableQuantity(Nullable<int> storeId, Nullable<int> productId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetProductAvailableQuantity", storeIdParameter, productIdParameter);
        }
    
        public virtual ObjectResult<sp_AvailableQuantityForPhToSpTransfer_Result> sp_AvailableQuantityForPhToSpTransfer(Nullable<int> storeId, Nullable<int> productId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AvailableQuantityForPhToSpTransfer_Result>("sp_AvailableQuantityForPhToSpTransfer", storeIdParameter, productIdParameter);
        }
    
        public virtual ObjectResult<sp_AvailableQuantityForProductToProductionHouse_Result> sp_AvailableQuantityForProductToProductionHouse(Nullable<int> storeId, Nullable<int> productId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AvailableQuantityForProductToProductionHouse_Result>("sp_AvailableQuantityForProductToProductionHouse", storeIdParameter, productIdParameter);
        }
    
        public virtual ObjectResult<sp_AvailableQuantityForProductUsesInProductionHouse_Result> sp_AvailableQuantityForProductUsesInProductionHouse(Nullable<int> storeId, Nullable<int> productId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AvailableQuantityForProductUsesInProductionHouse_Result>("sp_AvailableQuantityForProductUsesInProductionHouse", storeIdParameter, productIdParameter);
        }
    
        public virtual ObjectResult<sp_CheckAvailableQuantityForProductForProductSoldForDayShift_Result> sp_CheckAvailableQuantityForProductForProductSoldForDayShift(Nullable<int> storeId, Nullable<int> shiftId, Nullable<int> productId, Nullable<System.DateTime> fromDate)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            var shiftIdParameter = shiftId.HasValue ?
                new ObjectParameter("shiftId", shiftId) :
                new ObjectParameter("shiftId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CheckAvailableQuantityForProductForProductSoldForDayShift_Result>("sp_CheckAvailableQuantityForProductForProductSoldForDayShift", storeIdParameter, shiftIdParameter, productIdParameter, fromDateParameter);
        }
    
        public virtual ObjectResult<sp_CheckAvailableQuantityForProductForProductSoldForNightShift_Result> sp_CheckAvailableQuantityForProductForProductSoldForNightShift(Nullable<int> storeId, Nullable<int> shiftId, Nullable<int> productId, Nullable<System.DateTime> fromDate)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            var shiftIdParameter = shiftId.HasValue ?
                new ObjectParameter("shiftId", shiftId) :
                new ObjectParameter("shiftId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CheckAvailableQuantityForProductForProductSoldForNightShift_Result>("sp_CheckAvailableQuantityForProductForProductSoldForNightShift", storeIdParameter, shiftIdParameter, productIdParameter, fromDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_GetProductAvailableQuantity(Nullable<int> storeId, Nullable<int> productId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_GetProductAvailableQuantity", storeIdParameter, productIdParameter);
        }
    
        public virtual ObjectResult<sp_MainStoreProductStatusQuery_Result> sp_MainStoreProductStatusQuery(Nullable<int> storeId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MainStoreProductStatusQuery_Result>("sp_MainStoreProductStatusQuery", storeIdParameter);
        }
    
        public virtual ObjectResult<sp_mainStoreToProductionHouse_Result> sp_mainStoreToProductionHouse(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> storeId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_mainStoreToProductionHouse_Result>("sp_mainStoreToProductionHouse", fromDateParameter, toDateParameter, storeIdParameter);
        }
    
        public virtual ObjectResult<sp_mainStoreToProductionHouseFinal_Result> sp_mainStoreToProductionHouseFinal(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> storeId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_mainStoreToProductionHouseFinal_Result>("sp_mainStoreToProductionHouseFinal", fromDateParameter, toDateParameter, storeIdParameter);
        }
    
        public virtual ObjectResult<sp_OtherExpenseAmountForSellReportWithOpeningProduct_Result> sp_OtherExpenseAmountForSellReportWithOpeningProduct(Nullable<int> storeId, Nullable<int> shiftId, Nullable<System.DateTime> fromDate)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            var shiftIdParameter = shiftId.HasValue ?
                new ObjectParameter("shiftId", shiftId) :
                new ObjectParameter("shiftId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_OtherExpenseAmountForSellReportWithOpeningProduct_Result>("sp_OtherExpenseAmountForSellReportWithOpeningProduct", storeIdParameter, shiftIdParameter, fromDateParameter);
        }
    
        public virtual ObjectResult<sp_ProductEntryHistoryForaSpecificDateFromSupplierToMainStore_Result> sp_ProductEntryHistoryForaSpecificDateFromSupplierToMainStore(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProductEntryHistoryForaSpecificDateFromSupplierToMainStore_Result>("sp_ProductEntryHistoryForaSpecificDateFromSupplierToMainStore", dateParameter);
        }
    
        public virtual ObjectResult<sp_ProductEntryHistoryForaSpecificDateFromSupplierToMainStoreFinal_Result> sp_ProductEntryHistoryForaSpecificDateFromSupplierToMainStoreFinal(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProductEntryHistoryForaSpecificDateFromSupplierToMainStoreFinal_Result>("sp_ProductEntryHistoryForaSpecificDateFromSupplierToMainStoreFinal", dateParameter);
        }
    
        public virtual ObjectResult<sp_ProductEntryHistoryForSpecificDayInSellsPoint_Result> sp_ProductEntryHistoryForSpecificDayInSellsPoint(Nullable<System.DateTime> fromDate, Nullable<int> storeId, Nullable<int> shiftId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            var shiftIdParameter = shiftId.HasValue ?
                new ObjectParameter("shiftId", shiftId) :
                new ObjectParameter("shiftId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProductEntryHistoryForSpecificDayInSellsPoint_Result>("sp_ProductEntryHistoryForSpecificDayInSellsPoint", fromDateParameter, storeIdParameter, shiftIdParameter);
        }
    
        public virtual ObjectResult<sp_ProductEntryHistoryFromSupplierToMainStoreForReporting_Result> sp_ProductEntryHistoryFromSupplierToMainStoreForReporting(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> supplierId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("supplierId", supplierId) :
                new ObjectParameter("supplierId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProductEntryHistoryFromSupplierToMainStoreForReporting_Result>("sp_ProductEntryHistoryFromSupplierToMainStoreForReporting", fromDateParameter, toDateParameter, supplierIdParameter);
        }
    
        public virtual ObjectResult<sp_ProductEntryHistoryFromSupplierToMainStoreForReportingFinal_Result> sp_ProductEntryHistoryFromSupplierToMainStoreForReportingFinal(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> supplierId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("supplierId", supplierId) :
                new ObjectParameter("supplierId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProductEntryHistoryFromSupplierToMainStoreForReportingFinal_Result>("sp_ProductEntryHistoryFromSupplierToMainStoreForReportingFinal", fromDateParameter, toDateParameter, supplierIdParameter);
        }
    
        public virtual ObjectResult<sp_ProductSell_Result> sp_ProductSell(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> storeId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProductSell_Result>("sp_ProductSell", fromDateParameter, toDateParameter, storeIdParameter);
        }
    
        public virtual ObjectResult<sp_ProductSellFinal_Result> sp_ProductSellFinal(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> storeId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProductSellFinal_Result>("sp_ProductSellFinal", fromDateParameter, toDateParameter, storeIdParameter);
        }
    
        public virtual ObjectResult<sp_ProductSellHistoryWithOpeningProductForDayShift_Result> sp_ProductSellHistoryWithOpeningProductForDayShift(Nullable<int> storeId, Nullable<int> shiftId, Nullable<System.DateTime> fromDate)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            var shiftIdParameter = shiftId.HasValue ?
                new ObjectParameter("shiftId", shiftId) :
                new ObjectParameter("shiftId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProductSellHistoryWithOpeningProductForDayShift_Result>("sp_ProductSellHistoryWithOpeningProductForDayShift", storeIdParameter, shiftIdParameter, fromDateParameter);
        }
    
        public virtual ObjectResult<sp_ProductSellHistoryWithOpeningProductForDayShiftQueryB_Result> sp_ProductSellHistoryWithOpeningProductForDayShiftQueryB(Nullable<int> storeId, Nullable<int> shiftId, Nullable<System.DateTime> fromDate)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            var shiftIdParameter = shiftId.HasValue ?
                new ObjectParameter("shiftId", shiftId) :
                new ObjectParameter("shiftId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProductSellHistoryWithOpeningProductForDayShiftQueryB_Result>("sp_ProductSellHistoryWithOpeningProductForDayShiftQueryB", storeIdParameter, shiftIdParameter, fromDateParameter);
        }
    
        public virtual ObjectResult<sp_ProductSellHistoryWithOpeningProductForNightShift_Result> sp_ProductSellHistoryWithOpeningProductForNightShift(Nullable<int> storeId, Nullable<int> shiftId, Nullable<System.DateTime> fromDate)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            var shiftIdParameter = shiftId.HasValue ?
                new ObjectParameter("shiftId", shiftId) :
                new ObjectParameter("shiftId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProductSellHistoryWithOpeningProductForNightShift_Result>("sp_ProductSellHistoryWithOpeningProductForNightShift", storeIdParameter, shiftIdParameter, fromDateParameter);
        }
    
        public virtual ObjectResult<sp_ProductSellHistoryWithOpeningProductForNightShiftQueryB_Result> sp_ProductSellHistoryWithOpeningProductForNightShiftQueryB(Nullable<int> storeId, Nullable<int> shiftId, Nullable<System.DateTime> fromDate)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            var shiftIdParameter = shiftId.HasValue ?
                new ObjectParameter("shiftId", shiftId) :
                new ObjectParameter("shiftId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProductSellHistoryWithOpeningProductForNightShiftQueryB_Result>("sp_ProductSellHistoryWithOpeningProductForNightShiftQueryB", storeIdParameter, shiftIdParameter, fromDateParameter);
        }
    
        public virtual ObjectResult<sp_ProductSellReportWithOpeningProduct_Result> sp_ProductSellReportWithOpeningProduct(Nullable<int> storeId, Nullable<System.DateTime> date)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProductSellReportWithOpeningProduct_Result>("sp_ProductSellReportWithOpeningProduct", storeIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<sp_ProductSoldForDayShift_Result> sp_ProductSoldForDayShift(Nullable<int> storeId, Nullable<int> shiftId, Nullable<System.DateTime> fromDate)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            var shiftIdParameter = shiftId.HasValue ?
                new ObjectParameter("shiftId", shiftId) :
                new ObjectParameter("shiftId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProductSoldForDayShift_Result>("sp_ProductSoldForDayShift", storeIdParameter, shiftIdParameter, fromDateParameter);
        }
    
        public virtual ObjectResult<sp_ProductSoldForNightShift_Result> sp_ProductSoldForNightShift(Nullable<int> storeId, Nullable<int> shiftId, Nullable<System.DateTime> fromDate)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            var shiftIdParameter = shiftId.HasValue ?
                new ObjectParameter("shiftId", shiftId) :
                new ObjectParameter("shiftId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProductSoldForNightShift_Result>("sp_ProductSoldForNightShift", storeIdParameter, shiftIdParameter, fromDateParameter);
        }
    
        public virtual int sp_PurchableProductQuantity(Nullable<int> storeId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PurchableProductQuantity", storeIdParameter);
        }
    
        public virtual ObjectResult<sp_PurchaseAndBothTypeProductList_Result> sp_PurchaseAndBothTypeProductList(Nullable<int> storeId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PurchaseAndBothTypeProductList_Result>("sp_PurchaseAndBothTypeProductList", storeIdParameter);
        }
    
        public virtual ObjectResult<sp_PurchaseAndBothTypeProductListForProductUsesInProductionHouse_Result> sp_PurchaseAndBothTypeProductListForProductUsesInProductionHouse(Nullable<int> storeId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PurchaseAndBothTypeProductListForProductUsesInProductionHouse_Result>("sp_PurchaseAndBothTypeProductListForProductUsesInProductionHouse", storeIdParameter);
        }
    
        public virtual ObjectResult<sp_PuschaseableProductStatusInProductionHouse_Result> sp_PuschaseableProductStatusInProductionHouse(Nullable<int> storeId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_PuschaseableProductStatusInProductionHouse_Result>("sp_PuschaseableProductStatusInProductionHouse", storeIdParameter);
        }
    
        public virtual int sp_SellableProductQuantity(Nullable<int> storeId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SellableProductQuantity", storeIdParameter);
        }
    
        public virtual ObjectResult<sp_SellableProductStatusInProductionHouse_Result> sp_SellableProductStatusInProductionHouse(Nullable<int> storeId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SellableProductStatusInProductionHouse_Result>("sp_SellableProductStatusInProductionHouse", storeIdParameter);
        }
    
        public virtual ObjectResult<sp_SellPointProductStatus_Result> sp_SellPointProductStatus(Nullable<int> storeId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SellPointProductStatus_Result>("sp_SellPointProductStatus", storeIdParameter);
        }
    
        public virtual int sp_updatePurchaseTypeProductPrice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_updatePurchaseTypeProductPrice");
        }
    
        public virtual ObjectResult<spSearchProductEntryHistoryInSellsPoint_Result> spSearchProductEntryHistoryInSellsPoint(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> storeId, Nullable<int> shiftId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            var shiftIdParameter = shiftId.HasValue ?
                new ObjectParameter("shiftId", shiftId) :
                new ObjectParameter("shiftId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSearchProductEntryHistoryInSellsPoint_Result>("spSearchProductEntryHistoryInSellsPoint", fromDateParameter, toDateParameter, storeIdParameter, shiftIdParameter);
        }
    
        public virtual ObjectResult<spSearchProductEntryHistoryInSellsPointFinal_Result> spSearchProductEntryHistoryInSellsPointFinal(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> storeId, Nullable<int> shiftId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            var shiftIdParameter = shiftId.HasValue ?
                new ObjectParameter("shiftId", shiftId) :
                new ObjectParameter("shiftId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSearchProductEntryHistoryInSellsPointFinal_Result>("spSearchProductEntryHistoryInSellsPointFinal", fromDateParameter, toDateParameter, storeIdParameter, shiftIdParameter);
        }
    
        public virtual int sp_InsertTotalAmountDailyByShiftWise()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertTotalAmountDailyByShiftWise");
        }
    
        public virtual ObjectResult<sp_monthlyTotalAmountForDayShift_Result> sp_monthlyTotalAmountForDayShift()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_monthlyTotalAmountForDayShift_Result>("sp_monthlyTotalAmountForDayShift");
        }
    
        public virtual int sp_UpdatePurchaseTypeProductPriceForMainStore()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdatePurchaseTypeProductPriceForMainStore");
        }
    
        public virtual ObjectResult<sp_weeklyTotalProductSellByGraph_Result> sp_weeklyTotalProductSellByGraph()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_weeklyTotalProductSellByGraph_Result>("sp_weeklyTotalProductSellByGraph");
        }
    
        public virtual int sp_InsertTotalAmountDailyForNightShift()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertTotalAmountDailyForNightShift");
        }
    
        public virtual ObjectResult<sp_monthlyTotalAmountForNightShift_Result> sp_monthlyTotalAmountForNightShift()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_monthlyTotalAmountForNightShift_Result>("sp_monthlyTotalAmountForNightShift");
        }
    
        public virtual ObjectResult<sp_monthlyTotalAmount_Result> sp_monthlyTotalAmount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_monthlyTotalAmount_Result>("sp_monthlyTotalAmount");
        }
    
        public virtual ObjectResult<sp_weeklyTotalAmount_Result> sp_weeklyTotalAmount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_weeklyTotalAmount_Result>("sp_weeklyTotalAmount");
        }
    
        public virtual ObjectResult<sp_weeklyTotalAmountDayShiftWise_Result> sp_weeklyTotalAmountDayShiftWise()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_weeklyTotalAmountDayShiftWise_Result>("sp_weeklyTotalAmountDayShiftWise");
        }
    
        public virtual ObjectResult<sp_weeklyTotalAmountNightShiftWise_Result> sp_weeklyTotalAmountNightShiftWise()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_weeklyTotalAmountNightShiftWise_Result>("sp_weeklyTotalAmountNightShiftWise");
        }
    }
}
